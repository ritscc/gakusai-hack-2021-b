<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.abelab.gifttree.db.mapper.base.UserGiftBaseMapper">
  <resultMap id="BaseResultMap" type="dev.abelab.gifttree.db.entity.UserGift">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <id column="gift_id" jdbcType="INTEGER" property="giftId" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="received_at" jdbcType="TIMESTAMP" property="receivedAt" />
    <result column="received_by" jdbcType="INTEGER" property="receivedBy" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    user_id, gift_id, quantity, type, received_at, received_by
  </sql>
  <select id="selectByExample" parameterType="dev.abelab.gifttree.db.entity.UserGiftExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from user_gift
    where user_id = #{userId,jdbcType=INTEGER}
      and gift_id = #{giftId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user_gift
    where user_id = #{userId,jdbcType=INTEGER}
      and gift_id = #{giftId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="dev.abelab.gifttree.db.entity.UserGiftExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="dev.abelab.gifttree.db.entity.UserGift">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user_gift (user_id, gift_id, quantity, 
      type, received_at, received_by
      )
    values (#{userId,jdbcType=INTEGER}, #{giftId,jdbcType=INTEGER}, #{quantity,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{receivedAt,jdbcType=TIMESTAMP}, #{receivedBy,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="dev.abelab.gifttree.db.entity.UserGift">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user_gift
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="giftId != null">
        gift_id,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="receivedAt != null">
        received_at,
      </if>
      <if test="receivedBy != null">
        received_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="giftId != null">
        #{giftId,jdbcType=INTEGER},
      </if>
      <if test="quantity != null">
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="receivedAt != null">
        #{receivedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="receivedBy != null">
        #{receivedBy,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="dev.abelab.gifttree.db.entity.UserGiftExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from user_gift
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_gift
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.giftId != null">
        gift_id = #{record.giftId,jdbcType=INTEGER},
      </if>
      <if test="record.quantity != null">
        quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.receivedAt != null">
        received_at = #{record.receivedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.receivedBy != null">
        received_by = #{record.receivedBy,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_gift
    set user_id = #{record.userId,jdbcType=INTEGER},
      gift_id = #{record.giftId,jdbcType=INTEGER},
      quantity = #{record.quantity,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      received_at = #{record.receivedAt,jdbcType=TIMESTAMP},
      received_by = #{record.receivedBy,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="dev.abelab.gifttree.db.entity.UserGift">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_gift
    <set>
      <if test="quantity != null">
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="receivedAt != null">
        received_at = #{receivedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="receivedBy != null">
        received_by = #{receivedBy,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
      and gift_id = #{giftId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="dev.abelab.gifttree.db.entity.UserGift">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_gift
    set quantity = #{quantity,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      received_at = #{receivedAt,jdbcType=TIMESTAMP},
      received_by = #{receivedBy,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
      and gift_id = #{giftId,jdbcType=INTEGER}
  </update>
</mapper>